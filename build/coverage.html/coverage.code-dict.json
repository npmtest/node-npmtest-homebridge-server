{"/home/travis/build/npmtest/node-npmtest-homebridge-server/test.js":"/* istanbul instrument in package npmtest_homebridge_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-server/lib.npmtest_homebridge_server.js":"/* istanbul instrument in package npmtest_homebridge_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_server = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_server = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-server/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-server && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_server\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_server.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_homebridge_server.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_server.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_homebridge_server.__dirname + '/lib.npmtest_homebridge_server.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-server/node_modules/homebridge-server/index.js":"var Service, Characteristic, LastUpdate, HomebridgeAPI;\n\nmodule.exports = function(homebridge) {\n    Service = homebridge.hap.Service;\n    Characteristic = homebridge.hap.Characteristic;\n    HomebridgeAPI = homebridge;\n    homebridge.registerPlatform(\"homebridge-server\", \"Server\", ServerPlatform);\n}\n\nfunction ServerPlatform(log, config) {\n    var fs = require('fs');\n    var http = require('http');\n\n    // Get the config.json ...\n    var configJSON = require(HomebridgeAPI.user.configPath());\n    // ... extract the platforms JSON-object and instantiate string value ...\n    var platformsJSON = {};\n    var platforms = \"\";\n    // ... extract the accessories JSON-object and instantiate string value...\n    var accessoriesJSON = {};\n    var accessories = \"\";\n    // ... contains a list of installed plugins.\n    var installedPlugins = \"\";\n\n    // Prepare cosmetics for the site\n    // - CSS with Twitter bootstrap\n    // - fontface with Apple-like Open Sans\n    // - general header with responsive design\n    // - JS with Twitter bootstrap\n    var bootstrap = \"<link rel='stylesheet' href='//maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css'>\"\n        //+ \"<link href='//cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.0/bootstrap3-editable/css/bootstrap-editable.css' rel='stylesheet'/>\"\n    ;\n    var font = \"<link href='https://fonts.googleapis.com/css?family=Open+Sans:300,600' rel='stylesheet' type='text/css'>\";\n    var tablestyle = \"<style>\" +\n      \".responsive-wrapper { margin-bottom: 15px; }\" +\n      \".responsive-wrapper .row { display: flex; width: 100%; justify-content: space-between; padding: 1em 0.1em; margin: 0; }\" +\n      \".responsive-wrapper .row.content:hover { background-color: #e6e6e6; }\" +\n      \".row.header { border-bottom: 2px solid #ddd; }\" +\n      \".row.header div { font-weight: 600; font-size: 16px; }\" +\n      \".row.content { border: 1px solid hsla(0, 0%, 90%, 1); border-top: none; -webkit-transition: all 0.1s cubic-bezier(1, 0, 0.5, 1); transition: all 0.1s cubic-bezier(1, 0, 0.5, 1); }\" +\n      \".responsive-wrapper .row div { flex: none; overflow: none; }\" +\n      \".responsive-wrapper .row div:nth-child(1) { width: 10%; }\" +\n      \".responsive-wrapper .row div:nth-child(2) { width: 10%; }\" +\n      \".responsive-wrapper .row div:nth-child(3) { width: 60%; overflow: auto; }\" +\n      \".responsive-wrapper .row div:nth-child(4) { width: 10%; }\" +\n      \".responsive-wrapper .row.plugins { padding: 1em; }\" +\n      \".responsive-wrapper .row.plugins div:nth-child(1) { width: 15%; }\" +\n      \".responsive-wrapper .row.plugins div:nth-child(2) { width: 15%; }\" +\n      \".responsive-wrapper .row.plugins div:nth-child(3) { width: 50%; overflow: auto; }\" +\n      \".responsive-wrapper .row.plugins div:nth-child(4) { width: 20%; }\" +\n      \".responsive-wrapper .row div.action a.btn { font-weight: 600; font-size: 18px; margin: 0 5px; letter-spacing: 0.05em; -webkit-font-smoothing: antialiased; line-height: 1.1em !important; }\" +\n      \"@media screen and (max-width: 720px) {\" +\n      \"h2 { margin-top: 50px; }\" +\n      \".responsive-wrapper .row { display: block; padding: 30px 20px; margin-bottom: 10px; }\" +\n      \".responsive-wrapper .row.content { border-top: 1px solid hsla(0, 0%, 90%, 1); }\" +\n      \".responsive-wrapper .row.header { display: none; }\" +\n      \".responsive-wrapper .row div:before { margin-bottom: 0.25em; }\" +\n      \".responsive-wrapper .row div:nth-child(1) { margin-right: 1em; width: 100%; }\" +\n      \".responsive-wrapper .row div:nth-child(1):before { content: 'Type: '; display: inline-block; min-width: 15%; margin-right: 10px; font-weight: 600; }\" +\n      \".responsive-wrapper .row div:nth-child(2) { margin-right: 1em; width: 100%; }\" +\n      \".responsive-wrapper .row div:nth-child(2):before { content: 'Name: '; display: inline-block; min-width: 15%; margin-right: 10px; font-weight: 600; }\" +\n      \".responsive-wrapper .row div:nth-child(3) { margin-right: 1em; width: 100%; }\" +\n      \".responsive-wrapper .row div:nth-child(3):before { content: 'Info: '; display: inline-block; min-width: 15%; margin-right: 10px; font-weight: 600; }\" +\n      \".responsive-wrapper .row div:nth-child(4) { margin-right: 1em; width: 100%; }\" +\n      \".responsive-wrapper .row.plugins div:nth-child(1) { width: 100%; }\" +\n      \".responsive-wrapper .row.plugins div:nth-child(2) { width: 100%; }\" +\n      \".responsive-wrapper .row.plugins div:nth-child(3) { width: 100%; overflow: auto; }\" +\n      \".responsive-wrapper .row.plugins div:nth-child(4) { width: 100%; margin: 20px auto; }\" +\n      \"}\" +\n      \"</style>\";\n    var style = \"<style>h1, h2, h3, h4, h5, h6 {font-family: 'Open Sans', sans-serif;}p, div {font-family: 'Open Sans', sans-serif;} input[type='radio'], input[type='checkbox'] {line-height: normal; margin: 0;}</style>\"\n    var header = \"<html><meta name='viewport' content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no'><head><title>Homebridge - Configuration</title>\" + bootstrap + font + style + tablestyle + \"</head><body style='padding-top: 70px;'>\";\n    var footer = \"</body>\"\n        //+ \"<script src='//cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.0/bootstrap3-editable/js/bootstrap-editable.min.js'></script>\"\n        //+ \"<script> $(document).ready(function() { $.fn.editable.defaults.mode = 'popup';  $('#username').editable(); }); </script>\"\n        //+ \"<script defer='defer' src='//code.jquery.com/jquery-ui-latest.min.js'></script>\"\n        + \"<script defer='defer' src='//code.jquery.com/jquery-latest.min.js' type='text/javascript'></script>\"\n        + \"<script defer='defer' src='//maxcdn.bootstrapcdn.com/bootstrap/latest/js/bootstrap.min.js' type='text/javascript'></script>\" +\n        \"</html>\";\n    var navBar = (function() {/*\n      <nav class=\"navbar navbar-default navbar-fixed-top\">\n      <div class=\"container-fluid\">\n      <div class=\"navbar-header\">\n      <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\n      <span class=\"sr-only\">Toggle navigation</span>\n      <span class=\"icon-bar\"></span>\n      <span class=\"icon-bar\"></span>\n      <span class=\"icon-bar\"></span>\n      </button>\n      <a class=\"navbar-brand\" href=\"/\">Homebridge - Configuration</a>\n      </div>\n      <div id=\"navbar\" class=\"navbar-collapse collapse\">\n      <ul class=\"nav navbar-nav navbar-right\">\n      <li><a href=\"/createBackup\">Backup</a></li>\n      <li><a href=\"/showLog\">Log</a></li>\n      <li><a href=\"/listInstallablePlugins\">Plugins</a></li>\n      <li><a href=\"/restart\">Restart</a></li>\n      </ul>\n      </div>\n      </div>\n      </nav>\n      */}).toString().match(/[^]*\\/\\*([^]*)\\*\\/\\}$/)[1];\n\n    var table1 = (function() {/*\n      <div class=\"responsive-wrapper\">\n      <div class=\"row header\">\n      <div>Type</div>\n      <div>Name</div>\n      <div>Info</div>\n      <div></div>\n      </div>\n      */}).toString().match(/[^]*\\/\\*([^]*)\\*\\/\\}$/)[1];\n\n    // This closes the html-markup as string for the presented tables\n    var table2 = (function() {/*\n      </div>\n      */}).toString().match(/[^]*\\/\\*([^]*)\\*\\/\\}$/)[1];\n\n    // Prepares the html-markup for the bridge parameters as forms\n    var bridgeName;\n    var bridgeUsername;\n    var bridgePin;\n\n    function stripEscapeCodes(chunk) {\n        var receivedData = chunk.toString()\n            .replace(/\\%7E/g, '~')\n            .replace(/\\%26/g, '&')\n            .replace(/\\%40/g, '@')\n            .replace(/\\%23/g, '#')\n            .replace(/\\%7B/g, '{')\n            .replace(/\\%0D/g, '')\n            .replace(/\\%0A/g, '')\n            .replace(/\\%2C/g, ',')\n            .replace(/\\%7D/g, '}')\n            .replace(/\\%3A/g, ':')\n            .replace(/\\%22/g, '\"')\n            .replace(/\\+/g, ' ')\n            .replace(/\\+\\+/g, '')\n            .replace(/\\%2F/g, '/')\n            .replace(/\\%3C/g, '<')\n            .replace(/\\%3E/g, '>')\n            .replace(/\\%5B/g, '[')\n            .replace(/\\%5D/g, ']');\n        return receivedData;\n    }\n\n    var http = require(\"http\");\n    var https = require(\"https\");\n\n    function executeBash(cmd) {\n        var exec = require('child_process').exec;\n        exec(cmd, function(error, stdout, stderr) {\n            log(\"Executing: \" + cmd);\n            fs.writeFile(HomebridgeAPI.user.configPath().replace(\"config.json\",\"exec.out\"), stdout, \"utf8\", function(err, result) {\n                if (err) {\n                    return log(err);\n                }\n            });\n        });\n    }\n\n    function getInstalledPlugins(res) {\n        executeBash(\"npm list -g | grep 'homebridge'\");\n        fs.readFile(HomebridgeAPI.user.configPath().replace(\"config.json\",\"exec.out\"), \"utf8\", function(err, result) {\n            if (err) {\n                return log(err);\n            } else {\n                installedPlugins = result;\n            }\n        });\n    }\n\n    /**\n     * getJSON:  REST get request returning JSON object(s)\n     * @param options: http options object\n     * @param callback: callback to pass the results JSON object(s) back\n     */\n    function getJSON(options, onResult) {\n        var prot = options.port == 443 ? https : http;\n        var req = prot.request(options, function(res) {\n            var output = '';\n            res.setEncoding('utf8');\n            res.on('data', function(chunk) {\n                output += chunk;\n            });\n            res.on('end', function() {\n                var obj = JSON.parse(output);\n                onResult(res.statusCode, obj);\n            });\n        });\n        req.on('error', function(err) {\n            log('error: ' + err.message);\n        });\n        req.end();\n    };\n\n    function getPluginsFromNPMS(res, search) {\n        var options = {\n            host: 'api.npms.io',\n            port: 443,\n            path: '/v2/search?q=' + (!search || 0 === search.length ? '' : search + '+') + 'keywords:homebridge-plugin+not:deprecated+not:insecure&size=250',\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n        getJSON(options, function(statusCode, result) {\n            printPluginPage(res, result);\n        });\n    }\n\n    function prepareConfig() {\n        bridgeName = \"<div class='form-group'><label for='homebridgename'>Name:</label><input type='text' class='form-control' name='bridgeName' value='\" + configJSON.bridge.name + \"'></div>\";\n        bridgeUsername = \"<div class='form-group'><label for='username'>Username:</label><input type='text' class='form-control' name='bridgeUsername' value='\" + configJSON.bridge.username + \"'></div>\";\n        bridgePin = \"<div class='form-group'><label for='pin'>Pin:</label><input type='text' class='form-control' name='bridgePin' value='\" + configJSON.bridge.pin + \"'></div>\";\n\n        platformsJSON = configJSON.platforms != undefined ? configJSON.platforms : {};\n        platforms = \"\";\n        accessoriesJSON = configJSON.accessories != undefined ? configJSON.accessories : {};\n        accessories = \"\";\n\n        const wastebasket = \"&#128465\";\n        const pen = \"&#9997\";\n        var symbolToPresent = wastebasket;\n\n        for (var id_platform in platformsJSON) {\n            var platformNoTypeNoName = JSON.parse(JSON.stringify(platformsJSON[id_platform]));\n            delete platformNoTypeNoName.platform;\n            delete platformNoTypeNoName.name;\n            var platform = platformsJSON[id_platform];\n            platforms = platforms +\n                \"<div class='row content'>\" +\n                \"<div>\" + platform.platform + \"</div>\" +\n                \"<div>\" + platform.name + \"</div>\" +\n                \"<div><pre>\" + (JSON.stringify(platformNoTypeNoName, null, ' ')) + \"</pre></div>\" +\n                \"<div><a href='/removePlatform\" + id_platform + \"' class='btn btn-default center-block' style='outline:none !important;'><span style='font-size:25px;'>\" + symbolToPresent + \";</span></a></div>\" +\n                \"</div>\";\n        }\n\n        for (var id_accessory in accessoriesJSON) {\n            var accessoryNoTypeNoName = JSON.parse(JSON.stringify(accessoriesJSON[id_accessory]));\n            delete accessoryNoTypeNoName.accessory;\n            delete accessoryNoTypeNoName.name;\n            var accessory = accessoriesJSON[id_accessory];\n            accessories = accessories +\n                \"<div class='row content'>\" +\n                \"<div>\" + accessory.accessory + \"</div>\" +\n                \"<div>\" + accessory.name + \"</div>\" +\n                \"<div><pre>\" + (JSON.stringify(accessoryNoTypeNoName, null, ' ')) + \"</pre></div>\" +\n                \"<div><a href='/removeAccessory\" + id_accessory + \"' class='btn btn-default center-block' style='outline:none !important;'><span style='font-size:25px;'>\" + symbolToPresent + \";</span></a></div>\" +\n                \"</div>\";\n        }\n    }\n\n    function printPluginPage(res, result) {\n        res.write(header + navBar);\n        res.write(\"<div class='container'>\");\n        res.write(\"<h2>Plugins</h2>\");\n        res.write(\"<form enctype='application/x-www-form-urlencoded' action='/listInstallablePlugins' method='post'>\");\n        res.write(\"<div class='input-group'><input type='text' class='form-control' name='searchQuery' placeholder='search' /><br>\");\n        res.write(\"<span class='input-group-btn'><input type='submit' class='btn btn-default center-block' value='Filter' style='width:135px' /></span>\");\n        res.write(\"</div></form>\");\n\n        var plugins = \"\";\n        result.results.forEach(function(e) {\n            plugins = plugins +\n                \"<div class='row content plugins'>\" +\n                \"<div>\" + \"<a href='\" + e.package.links.npm + \"'>\" + e.package.name + \"</a></div>\" +\n                \"<div>\" + e.package.publisher.username + \"</div>\" +\n                \"<div>\" + e.package.description + \"</div>\";\n            if (installedPlugins.indexOf(e.package.name) > -1) {\n                plugins += \"<div class='action'><a href='/uninstallPlugin=\" + e.package.name + \"' class='btn btn-danger center-block' style='height: 34px; line-height: 16px; vertical-align:middle;outline:none !important;'>\" + \"Uninstall</a></div>\";\n            } else {\n                plugins += \"<div class='action'><a href='/installPlugin=\" + e.package.name + \"' class='btn btn-success center-block' style='height: 34px; line-height: 16px; vertical-align:middle;outline:none !important;'>\" + \"Install v\" + e.package.version + \"</a></div>\";\n            }\n            plugins += \"</div>\";\n        });\n        res.write(table1 + plugins + table2);\n        res.write(\"</div>\");\n        res.end(footer);\n    }\n\n    function printAddPage(res, type, additionalInput) {\n        res.write(header + navBar);\n        res.write(\"<div class='container'>\");\n\n        if (additionalInput != null) {\n            res.write(additionalInput);\n        }\n\n        res.write(\"<h2>Add \" + type + \"</h2>\");\n\n        res.write(\"<form enctype='application/x-www-form-urlencoded' action='/save\" + type + \"Settings' method='post'>\")\n        res.write(\"<textarea class='form-control' type='text' name='\" + type + \"ToAdd' rows='10' placeholder='{ \\\"\" + type + \"\\\": \\\"test\\\" }' required></textarea>\");\n        res.write(\"<br>\");\n        res.write(\"<div class='row'>\");\n        res.write(\"<div class='col-xs-offset-1 col-sm-offset-1 col-md-offset-2 col-xs-10 col-sm-9 col-md-8 text-center'>\");\n        res.write(\"<div class='btn-group' data-toggle='buttons'>\");\n        res.write(\"<input type='submit' class='btn btn-default center-block' value='Save' onClick='submit()' style='width:135px' />\");\n        res.write(\"<input type='submit' class='btn btn-default center-block' value='Cancel' onClick=\\\"location.href='/'\\\" style='width:135px' />\");\n        res.write(\"</div>\");\n        res.write(\"</div>\");\n        res.write(\"</form>\");\n\n        res.write(\"<br>\");\n        res.write(\"</div>\");\n        res.end(footer);\n    }\n\n    function printMainPage(res) {\n        res.write(header + navBar);\n        res.write(\"<div class='container'>\");\n        res.write(\"<form enctype='application/x-www-form-urlencoded' action='/saveBridgeSettings' method='post'>\")\n        res.write(bridgeName + bridgeUsername + bridgePin);\n        res.write(\"<input type='submit' class='btn btn-default center-block' style='width:135px' value='Save' />\");\n        res.write(\"</form>\");\n\n        res.write(\"<h2>Platforms</h2>\");\n        if (0 < Object.keys(platformsJSON).length) {\n            res.write(table1 + platforms + table2);\n        } else {\n            res.write(\"No platforms installed or configured!\");\n        }\n        res.write(\"<a href='/addPlatform' name='AddPlatform' class='btn btn-default center-block' style='width:135px'>Add</a><br>\");\n\n        res.write(\"<h2>Accessories</h2>\");\n        if (0 < Object.keys(accessoriesJSON).length) {\n            res.write(table1 + accessories + table2);\n        } else {\n            res.write(\"No accessories installed or configured!\");\n        }\n        res.write(\"<a href='/addAccessory' name='AddAccessory' class='btn btn-default center-block' style='width:135px'>Add</a><br>\");\n\n        res.write(\"</div>\");\n        res.end(footer);\n    }\n\n    function reloadConfig(res) {\n        configJSON = require(HomebridgeAPI.user.configPath());\n        prepareConfig();\n        printMainPage(res);\n    }\n\n    function saveConfig(res, backup) {\n        var newConfig = JSON.stringify(configJSON)\n            .replace(/\\[,/g, '[')\n            .replace(/,null/g, '')\n            .replace(/null,/g, '')\n            .replace(/null/g, '')\n            .replace(/,,/g, ',')\n            .replace(/,\\]/g, ']');\n        newConfig = JSON.stringify(JSON.parse(newConfig), null, 4);\n        if (backup != null) {\n            fs.writeFile(HomebridgeAPI.user.configPath() + '.bak', newConfig, \"utf8\", function(err, data) {\n                if (err) {\n                    return log(err);\n                }\n                res.write(header + navBar);\n                res.write(\"<div class='alert alert-success alert-dismissible fade in out'><a href='/' class='close' data-dismiss='success'>&times;</a><strong>Succes!</strong> Configuration saved!</div>\");\n                res.end(footer);\n            });\n        } else {\n            res.write(header + navBar);\n            res.write(\"<div class='alert alert-danger alert-dismissible fade in out'><a href='/' class='close' data-dismiss='alert'>&times;</a><strong>Note!</strong> Please restart Homebridge to activate your changes.</div>\");\n            fs.writeFile(HomebridgeAPI.user.configPath(), newConfig, \"utf8\", reloadConfig(res));\n        }\n    }\n\n    //We need a function which handles requests and send response\n    function handleRequest(req, res) {\n        switch (req.url) {\n            case '/':\n                prepareConfig();\n                printMainPage(res);\n                break;\n            case '/listInstallablePlugins':\n                if (req.method == 'POST') {\n                    req.on('data', function(chunk) {\n                        var receivedData = stripEscapeCodes(chunk).replace('searchQuery=', '');\n                        try {\n                            getInstalledPlugins(res);\n                            getPluginsFromNPMS(res, receivedData);\n                        } catch (ex) {\n                            log(ex);\n                        }\n                    });\n                    req.on('end', function(chunk) {});\n                } else {\n                    getInstalledPlugins(res);\n                    getPluginsFromNPMS(res);\n                }\n                break;\n            case '/saveBridgeSettings':\n                if (req.method == 'POST') {\n                    req.on('data', function(chunk) {\n                        var receivedData = chunk.toString();\n                        log(\"received body data: \" + receivedData);\n                        var arr = receivedData.split(\"&\");\n                        configJSON.bridge.name = stripEscapeCodes(arr[0].replace('bridgeName=', ''));\n                        configJSON.bridge.username = arr[1].replace('bridgeUsername=', '').replace(/\\%3A/g, ':');\n                        configJSON.bridge.pin = arr[2].replace('bridgePin=', '');\n                        saveConfig(res);\n                        log(\"Saved bridge settings.\");\n                    });\n                    req.on('end', function(chunk) {});\n                } else {\n                    log(\"[405] \" + req.method + \" to \" + req.url);\n                }\n                break;\n            case '/addPlatform':\n                printAddPage(res, \"Platform\");\n                break;\n            case '/addAccessory':\n                printAddPage(res, \"Accessory\");\n                break;\n            case '/savePlatformSettings':\n                if (req.method == 'POST') {\n                    req.on('data', function(chunk) {\n                        var receivedData = stripEscapeCodes(chunk).replace('PlatformToAdd=', '');\n                        try {\n                            if(configJSON.platforms == undefined) {\n                              configJSON[\"platforms\"] = [];\n                            }\n                            configJSON.platforms.push(JSON.parse(receivedData));\n                            if (configJSON.platforms.length == 1) {\n                                configJSON.platforms = JSON.parse(JSON.stringify(configJSON.platforms).replace('[,', '['));\n                            }\n                            saveConfig(res);\n                            log(\"Saved platform \" + JSON.parse(receivedData).name + \".\");\n                        } catch (ex) {\n                            res.write(header + navBar);\n                            res.write(\"<div class='alert alert-danger alert-dismissible fade in out'><a href='/addPlatform' class='close' data-dismiss='alert'>&times;</a><strong>\" + ex + \"</strong></div>\");\n                            printAddPage(res, \"Platform\", \"<code>\" + receivedData + \"</code>\");\n                        }\n                    });\n                    req.on('end', function(chunk) {});\n                } else {\n                    log(\"[405] \" + req.method + \" to \" + req.url);\n                }\n                break;\n            case '/saveAccessorySettings':\n                if (req.method == 'POST') {\n                    req.on('data', function(chunk) {\n                        var receivedData = stripEscapeCodes(chunk).replace('AccessoryToAdd=', '');\n                        try {\n                            if(configJSON.accessories == undefined) {\n                              configJSON[\"accessories\"] = [];\n                            }\n                            console.log(JSON.stringify(configJSON));\n                            configJSON.accessories.push(JSON.parse(receivedData));\n                            if (configJSON.accessories.length == 1) {\n                                configJSON.accessories = JSON.parse(JSON.stringify(configJSON.accessories).replace('[,', '['));\n                            }\n                            saveConfig(res);\n                            log(\"Saved accessory \" + JSON.parse(receivedData).name + \".\");\n                        } catch (ex) {\n                            res.write(header + navBar);\n                            res.write(\"<div class='alert alert-danger alert-dismissible fade in out'><a href='/addAccessory' class='close' data-dismiss='alert'>&times;</a><strong>\" + ex + \"</strong></div>\");\n                            printAddPage(res, \"Accessory\", \"<code>\" + receivedData + \"</code>\");\n                        }\n                    });\n                    req.on('end', function(chunk) {});\n                } else {\n                    log(\"[405] \" + req.method + \" to \" + req.url);\n                }\n                break;\n            case '/createBackup':\n                saveConfig(res, true);\n                break;\n            case '/showLog':\n                if (config.log == \"systemd\") {\n                      var exec = require('child_process').exec;\n                      var cmd = \"journalctl --no-pager -u homebridge --since yesterday\";\n                      exec(cmd, function(error, stdout, stderr) {\n                          log(\"Executing: \" + cmd);\n                          res.write(header + navBar);\n                          res.write(\"<div class='container'>\");\n                          res.write(\"<h2>Log</h2>\");\n                          res.write(\"<code>\" + stdout.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />') + \"</code>\");\n                          res.write(\"</div>\");\n                          res.end(footer);\n                      });\n                } else {\n                  var logFile = require('fs');\n                  logFile.readFile(config.log, 'utf8', function(err, log) {\n                      if (err) {\n                          return log(err);\n                      }\n                      res.write(header + navBar);\n                      res.write(\"<div class='container'>\");\n                      res.write(\"<h2>Log</h2>\");\n                      res.write(\"<code>\" + log.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />') + \"</code>\");\n                      res.write(\"</div>\");\n                      res.end(footer);\n                  });\n                }\n                break;\n            case '/restart':\n                executeBash(config.restart != undefined ? config.restart : \"echo 'No command specified!'\");\n                break;\n            default:\n                url = req.url;\n                if (url.indexOf('/remove') !== -1) {\n                    object = url.replace('/remove', '');\n                    if (object.indexOf('Platform') !== -1) {\n                        platform = object.replace('Platform', '');\n                        delete configJSON.platforms[platform];\n                        log(\"Removed platform \" + platform + \".\");\n                    } else if (object.indexOf('Accessory') !== -1) {\n                        accessory = object.replace('Accessory', '');\n                        delete configJSON.accessories[accessory];\n                        log(\"Removed accessory \" + accessory + \".\");\n                    }\n                    saveConfig(res);\n                } else if (url.indexOf('/installPlugin=') !== -1) {\n                    executeBash(\"npm install -g \" + url.replace('/installPlugin=', ''));\n                    getInstalledPlugins(res);\n                    getPluginsFromNPMS(res);\n                    break;\n                } else if (url.indexOf('/uninstallPlugin=') !== -1) {\n                    executeBash(\"npm uninstall -g \" + url.replace('/uninstallPlugin=', ''));\n                    getInstalledPlugins(res);\n                    getPluginsFromNPMS(res);\n                    break;\n                }\n        };\n    }\n\n    // Launches the webserver and transmits the website by concatenating the precreated markup\n    var server = http.createServer(handleRequest);\n\n    server.listen(config.port, function() {\n      var os = require('os');\n      var ifaces = os.networkInterfaces();\n\n      Object.keys(ifaces).forEach(function (ifname) {\n        ifaces[ifname].forEach(function (iface) {\n          if ('IPv4' !== iface.family || iface.internal !== false) {\n            return;\n          }\n          log(\"is listening on: http://%s:%s\", iface.address, config.port);\n        });\n      });\n    });\n}\n\nServerPlatform.prototype.accessories = function(callback) {\n    this.accessories = [];\n    callback(this.accessories);\n}\n"}